'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _express = require('express');

var _model = require('./../model');

var _model2 = _interopRequireDefault(_model);

var _list = require('./list');

var _list2 = _interopRequireDefault(_list);

var _post = require('./post');

var _post2 = _interopRequireDefault(_post);

var _put = require('./put');

var _put2 = _interopRequireDefault(_put);

var _delete = require('./delete');

var _delete2 = _interopRequireDefault(_delete);

var _get = require('./get');

var _get2 = _interopRequireDefault(_get);

var getRouter = function getRouter(_conn, url, params, enableOdataSyntax) {
  var options = params.options || {};
  var rest = params.rest || {};
  var actions = params.actions || {};

  var resourceURL = '/' + url;
  var entityURL = '' + resourceURL + '\\(:id\\)';

  var routes = [{
    method: 'post',
    url: resourceURL,
    controller: _post2['default'],
    config: rest.post || {} }, {
    method: 'put',
    url: entityURL,
    controller: _put2['default'],
    config: rest.put || {} }, {
    method: 'delete',
    url: entityURL,
    controller: _delete2['default'],
    config: rest['delete'] || rest.del || {} }, {
    method: 'get',
    url: entityURL,
    controller: _get2['default'],
    config: rest.get || {} }, {
    method: 'get',
    url: resourceURL,
    controller: _list2['default'],
    config: rest.list || {} }];

  var mongooseModel = _model2['default'].get(_conn, url);

  /*jshint -W064 */
  var router = (0, _express.Router)();
  routes.map(function (route) {
    router[route.method](route.url, function (req, res, next) {
      if (checkAuth(route.config.auth, req)) {
        //TODO: should run controller func after before done. [use app.post(url, auth, before, fn, after)]
        if (route.config.before) {
          if (route.method === 'post') {
            route.config.before(req.body, req, res);
          }if (route.method === 'get' && route.url === resourceURL) {
            route.config.before(req, res);
          } else {
            mongooseModel.findOne({ _id: req.params.id }, function (err, entity) {
              if (err) {
                return;
              }
              route.config.before(entity, req, res);
            });
          }
        }
        route.controller(req, mongooseModel, options).then(function () {
          var result = arguments[0] === undefined ? {} : arguments[0];

          res.status(result.status || 200);
          if (result.text) {
            res.send(result.text);
          } else if (result.entity) {
            res.jsonp(result.entity);
          } else {
            res.end();
          }
          if (route.config.after) {
            route.config.after(result.entity, result.originEntity, req, res);
          }
        }, function (err) {
          if (err.status) {
            res.status(err.status).send(err.text || '');
          } else {
            next(err);
          }
        });
      } else {
        res.status(401).end();
      }
    });
  });

  for (var actionUrl in actions) {
    var action = actions[actionUrl];
    (function (actionUrl, action) {
      var fullUrl = '' + entityURL + '' + actionUrl;
      router.post(fullUrl, function (req, res, next) {
        if (checkAuth(action.auth)) {
          action(req, res, next);
        } else {
          res.status(401).end();
        }
      });
    })(actionUrl, action);
  }

  return router;
};

var checkAuth = function checkAuth(auth, req) {
  if (!auth) {
    return true;
  }
  return auth(req);
};

exports['default'] = { getRouter: getRouter };
module.exports = exports['default'];